#summary A selection of Java Libraries and APIs I either use or should use...

<wiki:toc max_depth="2" />

= Build & Dependency Management =

 * [http://ant.apache.org/ Ant]
 * [http://ant.apache.org/ivy/ Ivy]
 * [http://maven.apache.org/ Maven]

= Caching =

 * [http://ehcache.org/ Ehcache]
 * !GemFire Cache
!GemFire is a Java based cache  tutorial [http://community.gemstone.com/display/gemfire/GemFire+Tutorial here]. !GemFire is a distributed cache in which each distributed peer is connected to all other peers. A more comprehensive overview can be found [http://ofps.oreilly.com/titles/9781449323950/id2325011_09-gemfire.html here]. Under the !GemFire Client/Server architecture each !GemFire peer becomes a server which also listens to connections from !GemFire clients on a separate port. A !GemFire client only connects to a limited number of these cache servers (which it discovers via a locator) but because all the !GemFire peers/servers are linked to each other the client has access to the entire data grid.

= Collections =

 * [http://acs.lbl.gov/software/colt/ Colt] (Old!)
 * [http://code.google.com/p/guava-libraries/ Guava]
 * [http://trove.starlight-systems.com/ Trove]

= Command Line Tools (Windows) =

 * [http://www.cygwin.com/ Cygwin] (paired with [http://x.cygwin.com/ Cygwin/X] for X11 goodies)
 * [http://www.ntwind.com/software/hstart.html Hidden Start] - allows you to run console applications and batch files without any window in the background.
 * [http://technet.microsoft.com/en-gb/sysinternals/bb896649.aspx PsTools]
 * [http://www.microsoft.com/powershell Windows PowerShell]

= Complex Event Stream Processing =

 * [http://esper.codehaus.org/ Esper]
    Esper is an event stream processing (ESP) and event correlation engine (CEP) written in Java. Basically instead of working as a database where you put stuff in to later poll it using SQL queries, Esper works as real time engine that triggers actions when event conditions occur among event streams. A tailored Event Processing Language (EPL) allows registering queries in the engine, using Java objects (POJO, JavaBean) to represent events. A listener class - which is basically also a POJO - will then be called by the engine when the EPL condition is matched as events come in. The EPL allows expressing complex matching conditions that include temporal windows, and join different event streams, as well as filter and sort them.
   A simple example could be to compute the average stock price of the BEA tick on a sliding window of 30 seconds. Given a StockTick event bean with a price and symbol property and the EPL "select avg(price) from StockTick.win:time(30 sec) where symbol='IBM'", a POJO would get notified as tick come in - and in real world millions of ticks can come in - so there's no way to store them all to later query them using a classical database architecture. Statements can be much more complex, and also be combined together with "followed by" conditions. 

= Databases =

 * [http://hsqldb.org/ HSQLDB]

Also see [http://code.google.com/p/thesandbox/wiki/LibrariesAPIs#NoSQL NoSQL]

= Date/Time =

 * [http://joda-time.sourceforge.net/ JodaTime]

== Job Scheduling ==

 * [http://supportconnectw.ca.com/public/autosys/infodocs/autosys_cheatsheet.asp AutoSys]
 * [http://www.quartz-scheduler.org/ Quartz]

= Design Patterns =

[http://www.jpatterns.org/ JPatterns] - Annotations for clearly specifying design patterns in Java.

= Enterprise Integration =

== Camel ==

[http://camel.apache.org/ Camel]<br>
For a list of all the EIPs that Camel supports, see [http://camel.apache.org/enterprise-integration-patterns.html here].

=== Components ===

[http://camel.apache.org/jms.html JMS Component for Camel]

[http://camel.apache.org/quickfix.html QuickFixJ]

[http://camel.apache.org/restlet.html Restlet]
 * http://www.javacodegeeks.com/2013/03/rest-with-apache-camel.html
 * http://www.javacodegeeks.com/2012/05/rest-endpoint-for-integration-using.html

= The FIX Protocol =

The *F* inancial *I* nformation E *x* change Protocol. See [http://javarevisited.blogspot.co.uk/2011/04/fix-protocol-tutorial-for-beginners.html here] for a series of tutorial on the FIX Protocol.

== QuickFixJ ==

http://www.quickfixj.org/

= Static Analysis =

 * [http://findbugs.sourceforge.net/ Find Bugs]
 * [http://www.sonarsource.org/ Sonar]

=== Tools & References ===

 * [http://www.btobits.com/fixopaedia/index.html B2Bits]
 * [http://www.critchley.biz/js/FIXProtocol.html FIX Protocol Translator]
 * [http://www.fixionary.com/ Fixionary]
 * [http://www.fixprotocol.org/specifications/fix4.4fiximate/index.html Fiximate for FIX 4.4]

= Google =

== Go Lang ==

[http://golang.org Go] is a complied garbage collected language which is a bit like a cross between C & Java, while still fairly new it is rapidly gaining traction.

== Protobufs ==

[http://code.google.com/p/protobuf/ Why use anything else?]

= Groovy =

== Groovyserv ==

 * [http://kobo.github.io/groovyserv/quickstart.html Groovyserv]

= Integrated Development Environments =

== IntelliJ IDEA ==

 * [http://www.jetbrains.com/idea/ IDEA] - Information on modifying you environment can be found [http://devnet.jetbrains.com/docs/DOC-181 here].

= Java Decompilation =

 * [http://www.varaneckas.com/jad/ JAD]
 * [http://java.decompiler.free.fr/ JD - Java Decompiler]

= JSON =

 * [http://code.google.com/p/google-gson/ GSON from Google]
 * [http://jackson.codehaus.org/] a [http://www.json.org/ JSON] Processor

= Middleware =

== JMS ==

[http://jpalace.org/docs/tutorials/spring/jms.html JMS with Spring Tutorial]

 * [http://activemq.apache.org/ Apache ActiveMQ]
 * [http://www.tibco.co.uk/products/automation/messaging/enterprise-messaging/enterprise-message-service/default.jsp Tibco EMS]
 * [http://www-01.ibm.com/software/integration/wmq/ IBM WebSphere MQ]

=== Tooling (Performance & monitoring) ===

 * [http://www.hermesjms.com/confluence/display/HJMS/Home HermesJMS] - used to monitor and manipulate JMS brokers/queues/topics etc.
 * [https://h20392.www2.hp.com/portal/swdepot/displayProductInfo.do?productNumber=HPJMETER HP JMeter]
 * [http://jmeter.apache.org/ Apache JMeter]
 * [http://www.yourkit.com/ YourKit Java Profiler] (they also offer a .NET equiv.)
 * For more Java profiling tools see the list of [http://www.javaperformancetuning.com/resources.shtml#ProfilingToolsFree free] and [http://www.javaperformancetuning.com/resources.shtml#ProfilingToolsNotFree commercial] profilers on the [http://www.javaperformancetuning.com/ Java Performance Tuning]
 * [http://visualvm.java.net/ VisualVM] - used to connect to you java application over JMX and part of more recent JDK releases, has a wide variety of plugins e.g. [https://kenai.com/projects/btrace/pages/Home btrace] or [http://visualvm.java.net/saplugin.html sapluglin] from http://visualvm.java.net/plugins.html & [http://java.net/projects/tda/downloads/directory/visualvm here].
 * [http://architects.dzone.com/articles/how-analyze-java-thread-dumps How to Analyse Java Thread Dumps]


== Tibco ==

 * [http://www.tibco.co.uk/products/automation/messaging/enterprise-messaging/enterprise-message-service/default.jsp Tibco EMS]
 * [http://www.tibco.co.uk/products/automation/messaging/low-latency/rendezvous/default.jsp Tibco Rendezvous]

= NoSQL =

 * [http://cassandra.apache.org/ Apache Cassandra] - Cassandra is similar in to [http://code.google.com/p/thesandbox/wiki/LibrariesAPIs#Caching GemFire] in some senses, you run a distributed platform that manages replication itself, I *think* !GemFIre is ACID however where as Cassandra is not.
 * [http://www.mongodb.org/ MongoDB]
 * !GemFire (also see caching section)
 * [http://www.neo4j.org/learn Neo4j] - a graph based NoSQL database
 * [http://redis.io/ Redis]

= Open JDK 7 for OS X =

[http://code.google.com/p/openjdk-osx-build/ openjdk-osx-build]

= Object Relational Mapping (ORM) =

 * [http://www.hibernate.org/ Hibernate]
 * [http://en.wikipedia.org/wiki/List_of_object-relational_mapping_software#Java List of Alternatives]

= Reviews =

 * [http://www.atlassian.com/software/crucible/overview Crucible from Atlassian]
 * [http://phabricator.org/ Phabricator from Facebook]

= Screenshot Utilities =

 * [http://getgreenshot.org/ Greenshot]

= Testing =

== Mocking ==

 * [http://code.google.com/p/mockito/ Mockito] - Intro [http://gojko.net/2009/10/23/mockito-in-six-easy-examples/ 1], [http://refcardz.dzone.com/refcardz/mockito 2]
 * [http://code.google.com/p/powermock/ PowerMock] - Used to Mock Statics [http://code.google.com/p/powermock/wiki/MockStatic 1] or [http://java.dzone.com/articles/using-powermock-mock-static 2] and [http://powermock.googlecode.com/files/PowerMockAtOredev.pdf Mock the un-testable] with it's [http://metlos.wordpress.com/2012/09/14/the-dark-powers-of-powermock/ Dark Powers]

== Test/Code Coverage ==

 * [http://www.atlassian.com/software/clover/overview Clover] - Java Code Coverage
 * [http://mojo.codehaus.org/cobertura-maven-plugin/index.html Cobertura] - via the Mojo plugin for Maven

= XA =

*Note:* The whole point of XA is that transactions are global (as opposed to local) which means you can tie actions/events together to make everything atomic. So essentially _global_ transactions enable you to work with multiple transactional resources (e.g. relational databases and message queues) at the same time. A _local_ transaction on the other hand is resource specific, e.g. just a JMS broker or a database.

The Java Transaction API ([http://en.wikipedia.org/wiki/Java_Transaction_API JTA]) is JavaEE's implementation of the [http://en.wikipedia.org/wiki/X/Open_XA XA] standard protocol. JTA is part of the JavaEE specification, which means that any JavaEE-compliant application server must provide JTA support (some lightweight alternatives like Apache Tomcat do not provide it). Using JTA outside a JAVA EE server takes some work to set up because you have to find and use a JTA transaction manager, such as one of these:

 * [http://www.atomikos.com/ Atomikos]
 * [http://jotm.ow2.org/xwiki/bin/view/Main/WebHome JOTM]
 * [http://www.bitronix.be Bitronix]

== Transaction Propagation ==

Transaction propagation means that if you have two methods which are both transactional and one calls the other, then method being called can simply use use the existing transaction from the first method. Propagation is defined simply as the spreading of something. [http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/transaction.html This] page can help.

= UML =

Generating UML diagrams from Java source code
 * http://www.umlgraph.org/index.html

= Web =

== REST ==

 * [http://restlet.org/ Restlet]

= XML =

e *X* tensible *M* arkup *L* anguage

== JAXB (Java API for XML Binding) ==

Manipulating XML Pojos [http://javarevisited.blogspot.co.uk/2013/01/jaxb-xml-binding-tutorial-marshalling-unmarshalling-java-object-xml.html Tutorial]

= YAML =

 * [http://code.google.com/p/snakeyaml/ SnakeYAML]